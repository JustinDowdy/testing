{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","SearchBooks","useMutation","saveBook","error","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useEffect","bookIdArr","length","handleFormSubmit","event","a","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","link","infoLink","console","handleSaveBook","selectedBookId","bookToSave","find","Auth","loggedIn","variables","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","href","disabled","some","onClick","QUERY_ME","SavedBooks","useQuery","loading","data","removeBook","userData","me","handleDeleteBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","client","ApolloClient","request","operation","setContext","headers","authorization","uri","App","ApolloProvider","exact","path","component","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"iWAgDe,M,0FA1Cb,WACE,OAAOA,IAAOC,KAAKC,c,sBAIrB,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,K,4BAIzC,SAAeA,GACb,IAEE,OADgBH,IAAOG,GACXE,IAAMC,KAAKC,MAAQ,IAG/B,MAAOC,GACP,OAAO,K,sBAIX,WAEE,OAAOC,aAAaC,QAAQ,c,mBAG9B,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GACjCE,OAAOC,SAASC,OAAO,O,oBAGzB,WAEEN,aAAaO,WAAW,YAExBH,OAAOC,SAASC,OAAO,S,MC5BdE,EAAe,SAACC,GAC3B,IAAMC,EAAeV,aAAaC,QAAQ,eACtCU,KAAKC,MAAMZ,aAAaC,QAAQ,gBAChC,KAEJ,IAAKS,EACH,OAAO,EAGT,IAAMG,EAAmB,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAcI,QAAO,SAACC,GAAD,OAAiBA,IAAgBN,KAGlF,OAFAT,aAAaG,QAAQ,cAAeQ,KAAKK,UAAUH,KAE5C,G,gBC1BII,EAAaC,YAAH,qNAYVC,EAAWD,YAAH,kQAYRE,EAAYF,YAAH,ufAmBTG,EAAcH,YAAH,wU,OC8HTI,EA1JK,WAClB,MAA8BC,YAAYH,GAA1C,mBAAOI,EAAP,KAEA,GAFA,KAAmBC,MAEuBC,mBAAS,KAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KAEA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAGA,EAAwCJ,mBFxBnB1B,aAAaC,QAAQ,eACtCU,KAAKC,MAAMZ,aAAaC,QAAQ,gBAChC,IEsBJ,mBAAOS,EAAP,KAAqBqB,EAArB,KAIAC,qBAAU,WACR,OAAO,WFtBgB,IAACC,KEsBCvB,GFrBbwB,OACZlC,aAAaG,QAAQ,cAAeQ,KAAKK,UAAUiB,IAEnDjC,aAAaO,WAAW,mBEsB1B,IAAM4B,EAAgB,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,yDACvBD,EAAME,iBAEDT,EAHkB,0CAId,GAJc,gCCqBlBU,MAAM,iDAAD,ODbiCV,IARpB,WAQfW,EARe,QAUPC,GAVO,sBAWb,IAAIC,MAAM,yBAXG,wBAcGF,EAASG,OAdZ,iBAcbC,EAda,EAcbA,MAEFC,EAAWD,EAAME,KAAI,SAACC,GAAD,YAAW,CACpCtC,OAAQsC,EAAKC,GACbC,QAASF,EAAKG,WAAWD,SAAW,CAAC,wBACrCE,MAAOJ,EAAKG,WAAWC,MACvBC,YAAaL,EAAKG,WAAWE,YAC7BC,OAAO,UAAAN,EAAKG,WAAWI,kBAAhB,eAA4BC,YAAa,GAChDC,KAAMT,EAAKG,WAAWO,UAAY,OAGpC7B,EAAiBiB,GACjBf,EAAe,IA1BM,kDA4BrB4B,QAAQjC,MAAR,MA5BqB,0DAAH,sDAiChBkC,EAAc,uCAAG,WAAOC,GAAP,2BAAAvB,EAAA,yDAEfwB,EAAalC,EAAcmC,MAC/B,SAACf,GAAD,OAAUA,EAAKtC,SAAWmD,KAGdG,EAAKC,WAAaD,EAAKtE,WAAa,KAN7B,0CASZ,GATY,cAYbwD,EAAqDY,EAArDZ,QAASxC,EAA4CoD,EAA5CpD,OAAQ2C,EAAoCS,EAApCT,YAAaC,EAAuBQ,EAAvBR,MAAOF,EAAgBU,EAAhBV,MAAOK,EAASK,EAATL,KAZ/B,kBAebhC,EAAS,CACbyC,UAAW,CAAEhB,UAASxC,SAAQ2C,cAAaC,QAAOF,QAAOK,UAhBxC,OAoBnBzB,EAAgB,GAAD,mBAAKrB,GAAL,CAAmBmD,EAAWpD,UApB1B,kDAsBnBiD,QAAQjC,MAAR,MAtBmB,0DAAH,sDA0BpB,OACE,qCACE,cAACyC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,qBAA3B,SACE,eAACC,EAAA,EAAD,WACE,mDACA,cAACC,EAAA,EAAD,CAAMC,SAAUpC,EAAhB,SACE,eAACmC,EAAA,EAAKE,IAAN,WACE,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACE,cAACL,EAAA,EAAKM,QAAN,CACEC,KAAK,cACLC,MAAOjD,EACPkD,SAAU,SAACC,GAAD,OAAOlD,EAAekD,EAAEC,OAAOH,QACzCI,KAAK,OACLC,KAAK,KACLC,YAAY,wBAGhB,cAACX,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAjB,SACE,cAACU,EAAA,EAAD,CAAQH,KAAK,SAASI,QAAQ,UAAUH,KAAK,KAA7C,uCASV,eAACd,EAAA,EAAD,WACE,6BACG1C,EAAcO,OAAd,kBACcP,EAAcO,OAD5B,aAEG,+BAEN,cAACqD,EAAA,EAAD,UACG5D,EAAcmB,KAAI,SAACC,GAClB,OACE,eAACyC,EAAA,EAAD,CAAwBC,OAAO,OAA/B,UACG1C,EAAKM,MACJ,cAACmC,EAAA,EAAKE,IAAN,CACEC,IAAK5C,EAAKM,MACVuC,IAAG,wBAAmB7C,EAAKI,OAC3BmC,QAAQ,QAER,KACJ,eAACE,EAAA,EAAKK,KAAN,WACE,cAACL,EAAA,EAAKM,MAAN,UAAa/C,EAAKI,QAClB,oBAAGiB,UAAU,QAAb,sBAA+BrB,EAAKE,WACpC,cAACuC,EAAA,EAAKO,KAAN,UAAYhD,EAAKK,cACjB,cAACoC,EAAA,EAAKO,KAAN,UACE,mBAAGC,KAAMjD,EAAKS,KAAMyB,OAAO,SAA3B,sDAIDlB,EAAKC,YACJ,cAACqB,EAAA,EAAD,CACEY,SAAQ,OAAEvF,QAAF,IAAEA,OAAF,EAAEA,EAAcwF,MACtB,SAACnF,GAAD,OAAiBA,IAAgBgC,EAAKtC,UAExC2D,UAAU,qBACV+B,QAAS,kBAAMxC,EAAeZ,EAAKtC,SALrC,UAOe,OAAZC,QAAY,IAAZA,OAAA,EAAAA,EAAcwF,MACb,SAACnF,GAAD,OAAiBA,IAAgBgC,EAAKtC,WAEpC,oCACA,yBA7BDsC,EAAKtC,oB,SE/HjB2F,EAAWlF,YAAH,+QC6FNmF,EAjFI,WAEjB,MAA0BC,YAASF,GAA3BG,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KACjB,EAAgCjF,YAAYF,GAA5C,mBAAOoF,EAAP,KAEMC,GAFN,KAAqBjF,OAEA,OAAJ+E,QAAI,IAAJA,OAAA,EAAAA,EAAMG,KAAM,IAE7B,GAAIJ,EACF,OAAO,6CAIT,IAAMK,EAAgB,uCAAG,WAAOnG,GAAP,SAAA4B,EAAA,yDACT0B,EAAKC,WAAaD,EAAKtE,WAAa,KAD3B,0CAId,GAJc,gCAQfgH,EAAW,CACfxC,UAAW,CAAExD,YATM,OAYrBD,EAAaC,GAZQ,gDAcrBiD,QAAQjC,MAAR,MAdqB,yDAAH,sDAkBtB,OACE,qCACE,cAACyC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,qBAA3B,SACE,cAACC,EAAA,EAAD,UACE,0DAGJ,eAACA,EAAA,EAAD,WACE,6BACGqC,EAASG,WAAW3E,OAApB,kBACcwE,EAASG,WAAW3E,OADlC,kBAEoC,IAA/BwE,EAASG,WAAW3E,OAAe,OAAS,QAFjD,KAIG,6BAEN,cAACqD,EAAA,EAAD,UACGmB,EAASG,WAAW/D,KAAI,SAACC,GACxB,OACE,eAACyC,EAAA,EAAD,CAAwBC,OAAO,OAA/B,UACG1C,EAAKM,MACJ,cAACmC,EAAA,EAAKE,IAAN,CACEC,IAAK5C,EAAKM,MACVuC,IAAG,wBAAmB7C,EAAKI,OAC3BmC,QAAQ,QAER,KACJ,eAACE,EAAA,EAAKK,KAAN,WACE,cAACL,EAAA,EAAKM,MAAN,UAAa/C,EAAKI,QAClB,oBAAGiB,UAAU,QAAb,sBAA+BrB,EAAKE,WACpC,cAACuC,EAAA,EAAKO,KAAN,UAAYhD,EAAKK,cACjB,cAACoC,EAAA,EAAKO,KAAN,UACE,mBAAGC,KAAMjD,EAAKS,KAAMyB,OAAO,SAA3B,sDAIF,cAACI,EAAA,EAAD,CACEjB,UAAU,uBACV+B,QAAS,kBAAMS,EAAiB7D,EAAKtC,SAFvC,oCAjBOsC,EAAKtC,oB,6DC8CfqG,EApGI,WAEjB,MAAwCpF,mBAAS,CAAEqF,SAAU,GAAIC,MAAO,GAAIC,SAAU,KAAtF,mBAAOC,EAAP,KAAqBC,EAArB,KAEA,EAAoBzF,oBAAS,GAAtB0F,EAAP,oBAEA,EAAkC1F,oBAAS,GAA3C,mBAAO2F,EAAP,KAAkBC,EAAlB,KACA,EAA2B/F,YAAYJ,GAAvC,mBAAOoG,EAAP,KAEMC,GAFN,KAAiB/F,MAES,SAACW,GACzB,MAAwBA,EAAM6C,OAAtBJ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdqC,EAAgB,2BAAKD,GAAN,kBAAqBrC,EAAOC,OAGvC3C,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACvBD,EAAME,kBAIuB,IADhBF,EAAMqF,cACVC,kBACPtF,EAAME,iBACNF,EAAMuF,mBAPe,kBAWCJ,EAAQ,CAC5BtD,UAAU,eAAKiD,KAZI,gBAWdV,EAXc,EAWdA,KAIPzC,EAAK6D,MAAMpB,EAAKe,QAAQ7H,OAfH,kDAiBrBgE,QAAQjC,MAAR,MACA6F,GAAa,GAlBQ,QAqBvBH,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KAxBW,0DAAH,sDA4BtB,OACE,mCAEE,eAAC3C,EAAA,EAAD,CAAMuD,YAAU,EAACT,UAAWA,EAAW7C,SAAUpC,EAAjD,UAEE,cAAC2F,EAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,kBAAMV,GAAa,IAAQW,KAAMZ,EAAW/B,QAAQ,SAAhF,oDAIA,eAAChB,EAAA,EAAK4D,MAAN,WACE,cAAC5D,EAAA,EAAK6D,MAAN,CAAYC,QAAQ,WAApB,sBACA,cAAC9D,EAAA,EAAKM,QAAN,CACEM,KAAK,OACLE,YAAY,gBACZP,KAAK,WACLE,SAAUyC,EACV1C,MAAOoC,EAAaH,SACpBsB,UAAQ,IAEV,cAAC/D,EAAA,EAAKM,QAAQ0D,SAAd,CAAuBpD,KAAK,UAA5B,sCAGF,eAACZ,EAAA,EAAK4D,MAAN,WACE,cAAC5D,EAAA,EAAK6D,MAAN,CAAYC,QAAQ,QAApB,mBACA,cAAC9D,EAAA,EAAKM,QAAN,CACEM,KAAK,QACLE,YAAY,qBACZP,KAAK,QACLE,SAAUyC,EACV1C,MAAOoC,EAAaF,MACpBqB,UAAQ,IAEV,cAAC/D,EAAA,EAAKM,QAAQ0D,SAAd,CAAuBpD,KAAK,UAA5B,mCAGF,eAACZ,EAAA,EAAK4D,MAAN,WACE,cAAC5D,EAAA,EAAK6D,MAAN,CAAYC,QAAQ,WAApB,sBACA,cAAC9D,EAAA,EAAKM,QAAN,CACEM,KAAK,WACLE,YAAY,gBACZP,KAAK,WACLE,SAAUyC,EACV1C,MAAOoC,EAAaD,SACpBoB,UAAQ,IAEV,cAAC/D,EAAA,EAAKM,QAAQ0D,SAAd,CAAuBpD,KAAK,UAA5B,sCAEF,cAACG,EAAA,EAAD,CACEY,WAAYiB,EAAaH,UAAYG,EAAaF,OAASE,EAAaD,UACxE/B,KAAK,SACLI,QAAQ,UAHV,0BCTOiD,EAjFG,WAChB,MAAwC7G,mBAAS,CAAEsF,MAAO,GAAIC,SAAU,KAAxE,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAoBzF,oBAAS,GAAtB0F,EAAP,oBACA,EAAkC1F,oBAAS,GAA3C,mBAAO2F,EAAP,KAAkBC,EAAlB,KACA,EAAyB/F,YAAYN,GAArC,mBAAO2G,EAAP,KAEMJ,GAFN,KAAe/F,MAEW,SAACW,GACzB,MAAwBA,EAAM6C,OAAtBJ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdqC,EAAgB,2BAAKD,GAAN,kBAAqBrC,EAAOC,OAGvC3C,EAAgB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACvBD,EAAME,kBAIuB,IADhBF,EAAMqF,cACVC,kBACPtF,EAAME,iBACNF,EAAMuF,mBAPe,kBAWEC,EAAM,CAC3B3D,UAAU,eAAKiD,KAZI,gBAWbV,EAXa,EAWbA,KAIRzC,EAAK6D,MAAMpB,EAAKoB,MAAMlI,OAfD,kDAiBrBgE,QAAQjC,MAAR,MACA6F,GAAa,GAlBQ,QAqBvBH,EAAgB,CACdJ,SAAU,GACVC,MAAO,GACPC,SAAU,KAxBW,0DAAH,sDA4BtB,OACE,mCACE,eAAC3C,EAAA,EAAD,CAAMuD,YAAU,EAACT,UAAWA,EAAW7C,SAAUpC,EAAjD,UACE,cAAC2F,EAAA,EAAD,CAAOC,aAAW,EAACC,QAAS,kBAAMV,GAAa,IAAQW,KAAMZ,EAAW/B,QAAQ,SAAhF,+DAGA,eAAChB,EAAA,EAAK4D,MAAN,WACE,cAAC5D,EAAA,EAAK6D,MAAN,CAAYC,QAAQ,QAApB,mBACA,cAAC9D,EAAA,EAAKM,QAAN,CACEM,KAAK,OACLE,YAAY,aACZP,KAAK,QACLE,SAAUyC,EACV1C,MAAOoC,EAAaF,MACpBqB,UAAQ,IAEV,cAAC/D,EAAA,EAAKM,QAAQ0D,SAAd,CAAuBpD,KAAK,UAA5B,mCAGF,eAACZ,EAAA,EAAK4D,MAAN,WACE,cAAC5D,EAAA,EAAK6D,MAAN,CAAYC,QAAQ,WAApB,sBACA,cAAC9D,EAAA,EAAKM,QAAN,CACEM,KAAK,WACLE,YAAY,gBACZP,KAAK,WACLE,SAAUyC,EACV1C,MAAOoC,EAAaD,SACpBoB,UAAQ,IAEV,cAAC/D,EAAA,EAAKM,QAAQ0D,SAAd,CAAuBpD,KAAK,UAA5B,sCAEF,cAACG,EAAA,EAAD,CACEY,WAAYiB,EAAaF,OAASE,EAAaD,UAC/C/B,KAAK,SACLI,QAAQ,UAHV,0BCDOkD,EApEG,WAEhB,MAAkC9G,oBAAS,GAA3C,mBAAO+G,EAAP,KAAkBC,EAAlB,KAEA,OACE,qCACE,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOtD,QAAQ,OAAOuD,OAAO,KAAxC,SACE,eAACxE,EAAA,EAAD,CAAWF,OAAK,EAAhB,UACE,cAACwE,EAAA,EAAOG,MAAR,CAAcC,GAAIC,IAAMC,GAAG,IAA3B,iCAGA,cAACN,EAAA,EAAOO,OAAR,CAAe,gBAAc,WAC7B,cAACP,EAAA,EAAOQ,SAAR,CAAiBnG,GAAG,SAApB,SACE,eAACoG,EAAA,EAAD,CAAKhF,UAAU,UAAf,UACE,cAACgF,EAAA,EAAIJ,KAAL,CAAUD,GAAIC,IAAMC,GAAG,IAAvB,8BAIClF,EAAKC,WACJ,qCACE,cAACoF,EAAA,EAAIJ,KAAL,CAAUD,GAAIC,IAAMC,GAAG,SAAvB,4BAGA,cAACG,EAAA,EAAIJ,KAAL,CAAU7C,QAASpC,EAAKsF,OAAxB,uBAGF,cAACD,EAAA,EAAIJ,KAAL,CAAU7C,QAAS,kBAAMuC,GAAa,IAAtC,qCAOV,cAACY,EAAA,EAAD,CACEnE,KAAK,KACL8C,KAAMQ,EACNc,OAAQ,kBAAMb,GAAa,IAC3B,kBAAgB,eAJlB,SAME,eAACc,EAAA,EAAInF,UAAL,CAAeoF,iBAAiB,QAAhC,UACE,cAACH,EAAA,EAAMI,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACL,EAAA,EAAMxD,MAAP,CAAa9C,GAAG,eAAhB,SACE,eAACoG,EAAA,EAAD,CAAK9D,QAAQ,QAAb,UACE,cAAC8D,EAAA,EAAIQ,KAAL,UACE,cAACR,EAAA,EAAIJ,KAAL,CAAUa,SAAS,QAAnB,qBAEF,cAACT,EAAA,EAAIQ,KAAL,UACE,cAACR,EAAA,EAAIJ,KAAL,CAAUa,SAAS,SAAnB,8BAKR,cAACP,EAAA,EAAMzD,KAAP,UACE,eAAC2D,EAAA,EAAIM,QAAL,WACE,cAACN,EAAA,EAAIO,KAAL,CAAUF,SAAS,QAAnB,SACE,cAAC,EAAD,CAAWG,iBAAkB,kBAAMtB,GAAa,QAElD,cAACc,EAAA,EAAIO,KAAL,CAAUF,SAAS,SAAnB,SACE,cAAC,EAAD,CAAYG,iBAAkB,kBAAMtB,GAAa,sB,UC1D3DuB,GAAS,I,OAAIC,GAAa,CAC9BC,QAAS,SAAAC,GACP,IAAM1K,EAAQM,aAAaC,QAAQ,YAEnCmK,EAAUC,WAAW,CACnBC,QAAS,CACPC,cAAe7K,EAAK,iBAAaA,GAAU,OAIjD8K,IAAK,aAoBQC,OAjBf,WACE,OACE,cAACC,GAAA,EAAD,CAAgBT,OAAQA,GAAxB,SACE,cAAC,IAAD,UACE,qCACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAIC,UAAWvJ,IACjC,cAAC,IAAD,CAAOqJ,OAAK,EAACC,KAAK,SAASC,UAAWxE,IACtC,cAAC,IAAD,CAAOyE,OAAQ,kBAAM,oBAAI1G,UAAU,YAAd,uCCxBjC2G,IAASD,OACP,cAAC,IAAME,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bcfded1c.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import gql from 'graphql-tag';\n\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\nmutation saveBook($authors: [String], $description: String!, $title: String!, $bookId: String!, $image: String, $link: String) {\n    saveBook(authors: $authors, description: $description, title: $title, bookId: $bookId, image: $image, link: $link){\n        _id\n        username\n        email\n        bookCount\n        savedBooks {\n            authors\n            description\n            bookId\n            image\n            title\n            link\n    }\n  }\n}\n`;\n\nexport const REMOVE_BOOK = gql`\nmutation removeBook($bookId: String!) {\n    removeBook(bookId: $bookId) {\n        _id\n        username\n        email\n        bookCount\n        savedBooks {\n            authors\n            description\n            bookId\n            image\n            title\n            link\n    }\n  }\n}\n`;","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\nimport { useMutation } from \"@apollo/react-hooks\";\n\nimport Auth from \"../utils/auth\";\nimport { searchGoogleBooks } from \"../utils/API\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\nimport { SAVE_BOOK } from \"../utils/mutations\";\n\nconst SearchBooks = () => {\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error(\"something went wrong!\");\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"No author to display\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n        link: book.volumeInfo.infoLink || \"\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (selectedBookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find(\n      (book) => book.bookId === selectedBookId\n    );\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    const { authors, bookId, description, image, title, link } = bookToSave;\n\n    try {\n      await saveBook({\n        variables: { authors, bookId, description, image, title, link },\n      });\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Card.Text>\n                    <a href={book.link} target=\"_blank\">\n                      Click this link for info on this book!\n                    </a>\n                  </Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some(\n                        (savedBookId) => savedBookId === book.bookId\n                      )\n                        ? \"This book has already been saved!\"\n                        : \"Save this Book!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// route to get logged in user's info (needs the token)\nexport const getMe = (token) => {\n  return fetch('/api/users/me', {\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const createUser = (userData) => {\n  return fetch('/api/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\nexport const loginUser = (userData) => {\n  return fetch('/api/users/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(userData),\n  });\n};\n\n// save book data for a logged in user\nexport const saveBook = (bookData, token) => {\n  return fetch('/api/users', {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json',\n      authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify(bookData),\n  });\n};\n\n// remove saved book data for a logged in user\nexport const deleteBook = (bookId, token) => {\n  return fetch(`/api/users/books/${bookId}`, {\n    method: 'DELETE',\n    headers: {\n      authorization: `Bearer ${token}`,\n    },\n  });\n};\n\n// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import gql from 'graphql-tag';\n\nexport const QUERY_ME = gql`\n{\n    me {\n        _id\n        username\n        email\n        bookCount\n        savedBooks {\n            authors\n            description\n            bookId\n            image\n            title\n            link\n        }\n    }\n}\n`;","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport Auth from \"../utils/auth\";\nimport { removeBookId } from \"../utils/localStorage\";\nimport { QUERY_ME } from \"../utils/queries\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\n\nconst SavedBooks = () => {\n  // const [userData, setUserData] = useState({});\n  const { loading, data } = useQuery(QUERY_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n\n  const userData = data?.me || {};\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      await removeBook({\n        variables: { bookId },\n      });\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\n              }:`\n            : \"You have no saved books!\"}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Card.Text>\n                    <a href={book.link} target=\"_blank\">\n                      Click this link for info on this book!\n                    </a>\n                  </Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks';\nimport { ADD_USER } from '../utils/mutations';\n\n\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  const [addUser, {error}] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const {data } = await addUser({\n        variables: {...userFormData}\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from '../utils/auth';\nimport {LOGIN_USER} from '../utils/mutations'\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [login, {error}] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: {...userFormData}\n      });\n\n      Auth.login(data.login.token)\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  request: operation => {\n    const token = localStorage.getItem('id_token');\n\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    });\n  },\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={SearchBooks} />\n            <Route exact path='/saved' component={SavedBooks} />\n            <Route render={() => <h1 className='display-2'>Wrong page!</h1>} />\n          </Switch>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}